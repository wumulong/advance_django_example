{
    "docs": [
        {
            "location": "/",
            "text": "Django 进阶教程\n¶\n\n\n \n\n\nDjango\n 是一个有着十二年历史的 Python Web 框架，是 Python Web 开发中最流行的框架。因为 Python 容易上手的特性，有大量的第三方库，能够快速开发，也能够获得非常好的稳定性和性能，MVC 的设计也非常用以理解，所以新手选择 Django 作为一个启蒙框架是非常适合的。尽管我后来学了 Node.js, Rails 等等，但我依然记得 Django 就是我的第一个学习的 Web 开发框架，因 Django 可插拔 App 这一特性给我留下了很深的印象。\n\n\n虽然 Django 架构的大型网站和服务也不少，像 \nInstagram\n 就是一个以 Django 为基础的大型应用。国内的例子就很少，因为国内本身使用 Python 的公司就很少，很多都是用在运维方面，爬虫方面，各个公司可能会基于一些开源项目开发内部使用的自动化运维平台，因为自动化运维基本都是用 shell, Python 的各种开源库，所以用 Django 也是最佳选择。\n\n\n我写的这篇教程不包含基础的 Django 内容，也不包含基础的 Python 内容，Python 和 Django 都是使用的最新的，分别是 3.6.1 和 1.11。基础的 Django 教程可以去很多地方找到教程，CRUD 看看官方文档的 Tutorial 就能上手了，英文够好的话看文档是最佳选择，因为文档里面也包含了很多的示例代码。\n\n\n这篇教程包含了使用 Django 在 Web 开发中遇到的常见问题的解决方案，包含了简单的示例应用，总共分为三部分，第一部分是任务队列和搜索，第一章到第四章；第二部分是两个实战 App 的 视图及 API 实现，API 实现有两种，一种是常见的 RESTFul，还有一种是 GraphQL，穿插介绍了打标签和信息流这两个库，第五章到第八章；第三部分是本地开发辅助工具 django-debug-toolbar 和 django-extensions，前端结合 Webpack，以及接入 Sentry 异常捕获服务，结合 Ansible 在本地进行自动化部署 Django 应用，包含 CLI 和 GUI 实现，最后会对 API 进行一个 Benchmark，第九章到第十二章。\n\n\n详细的目录在项目中的 GitHub Pages 能看到，GitHub Pages 是用的 \nMkDocs\n 生成的，用了一个 Material Design 的主题，字体是 Souce Sans Pro 和 Source Code Pro，还挺好看，可读性也不错，目录、TOC 都有，还有 GFM 的语法，想直接读阅读 GitHub 渲染的 md 文件可以直接到 \ndocs\n 目录打开文件。README 中我就不放目录了，简单介绍下这个教程中涉及到了那些内容，有那些示例。\n\n\n任务队列/定时任务\n¶\n\n\n任务队列将介绍两个库的使用，一个是功能比较多的 \nCelery\n，另一个是功能较为简单的 \ndjango-rq\n，Celery 提供了非常易用的 API 来实现任务队列和定时任务，用 django-rq 实现定时任务则需要手动实现定时入队这一过程，当然如果你只需要简单的定时任务的话 \ndjango-corntab\n 也是一个非常好的选择。\n\n\n搜索\n¶\n\n\nElasticSearch 也是一个在 Web 应用中经常使用的东西，一个搜索引擎后端，被用来索引复杂数据，如商品属性数据，或者用来处理大量日志，教程中也包含了如何在 Django 中使用 \ndjango-elasticsearch\n 这个库的示例。\n\n\nAPI\n¶\n\n\nDjango 有一个非常方便使用的 RESTFul API 库，叫做 \nDjango REST framework\n，只要定义好 model，serializer，在根据业务写好视图层的代码，加上 \nDjango REST framework JWT\n 作为 API token 保护，就能提供一个完整的 API 后端服务。示例代码中也包含了一个简单的用户应用（登录注册）的视图层和 API 层实现，包含了基本的功能，登录注册、修改资料、修改密码、删除账户，全部提供了 RESTFul API 实现，另外也包含了这个用户 App 的 GraphQL 实现。\n\n\n图片处理\n¶\n\n\n图片处理也是 Web 开发中很常见的需求，用户上传的头像、图片可能很大，需要裁剪，需要处理成大中小尺寸和略缩图来保存，以方便不同页面的展示。教程中包含了简单用户注册是给表单添加一个验证码，防止应用被恶意爬虫盯上进行垃圾用户注册，也简单介绍了用 django-imagekit 进行图片处理。\n\n\n本地开发辅助\n¶\n\n\n介绍了两个本地开发辅助工具：django-debug-toolbar 和 django-extensions，django-debug-toolbar 能在本地测试的时候页面右侧有个可隐藏的面板，看到一些调试信息，应用变量、SQL 执行时间、模板文件、运行时间等等。django-extensions 给 Django 应用的 manage.py 添加了命令，比如查看应用的全部 URL 和对于的方法，可视化应用的 model，验证模板等等。\n\n\n前端结合\n¶\n\n\n前端结合介绍了一个非常神奇的包，让 Django 应用也能获得非常接近单页应用的用户体验，来自 Rails 社区的 \nTurbolinks\n，有人根据 Django 的 middleware 原理开发了适合 Django 的包，非常容易接入，就能让 Django 应用使用体验大变样。还介绍了一个 Django 结合 Webpack 的工具，Webpack 是现在前端最流行的打包工具，用来打包全部前端内容，CSS/JS/字体/图片，我也使用过 Django 的一些前端辅助工具，就是把全部 JS 和 CSS 拼接成一个文件然后 minifier，JS 还要在 uglify 混淆，其实都不太好用，还不如我自己写个 gulpfile。\n\n\n接入 Sentry 和部署问题\n¶\n\n\n最后介绍了如何接入 Sentry，Python 这样的动态语言，没有类型，要在运行时才会报错，很难在最开始就把代码中的异常处理都考虑到，所以就需要 Sentry 这样的捕获工具。作为一个『全干』工程师，部署应用，服务器 trouble shotting 也是一项必须掌握的技能。其实 Django 非常容易部署，只要选对了发行版，我对比下来用 Ubuntu 是最方便的，环境问题最少，熟练的话从启动服务器到完成二十分钟就能搞定。",
            "title": "README.md"
        },
        {
            "location": "/#django",
            "text": "Django  是一个有着十二年历史的 Python Web 框架，是 Python Web 开发中最流行的框架。因为 Python 容易上手的特性，有大量的第三方库，能够快速开发，也能够获得非常好的稳定性和性能，MVC 的设计也非常用以理解，所以新手选择 Django 作为一个启蒙框架是非常适合的。尽管我后来学了 Node.js, Rails 等等，但我依然记得 Django 就是我的第一个学习的 Web 开发框架，因 Django 可插拔 App 这一特性给我留下了很深的印象。  虽然 Django 架构的大型网站和服务也不少，像  Instagram  就是一个以 Django 为基础的大型应用。国内的例子就很少，因为国内本身使用 Python 的公司就很少，很多都是用在运维方面，爬虫方面，各个公司可能会基于一些开源项目开发内部使用的自动化运维平台，因为自动化运维基本都是用 shell, Python 的各种开源库，所以用 Django 也是最佳选择。  我写的这篇教程不包含基础的 Django 内容，也不包含基础的 Python 内容，Python 和 Django 都是使用的最新的，分别是 3.6.1 和 1.11。基础的 Django 教程可以去很多地方找到教程，CRUD 看看官方文档的 Tutorial 就能上手了，英文够好的话看文档是最佳选择，因为文档里面也包含了很多的示例代码。  这篇教程包含了使用 Django 在 Web 开发中遇到的常见问题的解决方案，包含了简单的示例应用，总共分为三部分，第一部分是任务队列和搜索，第一章到第四章；第二部分是两个实战 App 的 视图及 API 实现，API 实现有两种，一种是常见的 RESTFul，还有一种是 GraphQL，穿插介绍了打标签和信息流这两个库，第五章到第八章；第三部分是本地开发辅助工具 django-debug-toolbar 和 django-extensions，前端结合 Webpack，以及接入 Sentry 异常捕获服务，结合 Ansible 在本地进行自动化部署 Django 应用，包含 CLI 和 GUI 实现，最后会对 API 进行一个 Benchmark，第九章到第十二章。  详细的目录在项目中的 GitHub Pages 能看到，GitHub Pages 是用的  MkDocs  生成的，用了一个 Material Design 的主题，字体是 Souce Sans Pro 和 Source Code Pro，还挺好看，可读性也不错，目录、TOC 都有，还有 GFM 的语法，想直接读阅读 GitHub 渲染的 md 文件可以直接到  docs  目录打开文件。README 中我就不放目录了，简单介绍下这个教程中涉及到了那些内容，有那些示例。",
            "title": "Django 进阶教程"
        },
        {
            "location": "/#_1",
            "text": "任务队列将介绍两个库的使用，一个是功能比较多的  Celery ，另一个是功能较为简单的  django-rq ，Celery 提供了非常易用的 API 来实现任务队列和定时任务，用 django-rq 实现定时任务则需要手动实现定时入队这一过程，当然如果你只需要简单的定时任务的话  django-corntab  也是一个非常好的选择。",
            "title": "任务队列/定时任务"
        },
        {
            "location": "/#_2",
            "text": "ElasticSearch 也是一个在 Web 应用中经常使用的东西，一个搜索引擎后端，被用来索引复杂数据，如商品属性数据，或者用来处理大量日志，教程中也包含了如何在 Django 中使用  django-elasticsearch  这个库的示例。",
            "title": "搜索"
        },
        {
            "location": "/#api",
            "text": "Django 有一个非常方便使用的 RESTFul API 库，叫做  Django REST framework ，只要定义好 model，serializer，在根据业务写好视图层的代码，加上  Django REST framework JWT  作为 API token 保护，就能提供一个完整的 API 后端服务。示例代码中也包含了一个简单的用户应用（登录注册）的视图层和 API 层实现，包含了基本的功能，登录注册、修改资料、修改密码、删除账户，全部提供了 RESTFul API 实现，另外也包含了这个用户 App 的 GraphQL 实现。",
            "title": "API"
        },
        {
            "location": "/#_3",
            "text": "图片处理也是 Web 开发中很常见的需求，用户上传的头像、图片可能很大，需要裁剪，需要处理成大中小尺寸和略缩图来保存，以方便不同页面的展示。教程中包含了简单用户注册是给表单添加一个验证码，防止应用被恶意爬虫盯上进行垃圾用户注册，也简单介绍了用 django-imagekit 进行图片处理。",
            "title": "图片处理"
        },
        {
            "location": "/#_4",
            "text": "介绍了两个本地开发辅助工具：django-debug-toolbar 和 django-extensions，django-debug-toolbar 能在本地测试的时候页面右侧有个可隐藏的面板，看到一些调试信息，应用变量、SQL 执行时间、模板文件、运行时间等等。django-extensions 给 Django 应用的 manage.py 添加了命令，比如查看应用的全部 URL 和对于的方法，可视化应用的 model，验证模板等等。",
            "title": "本地开发辅助"
        },
        {
            "location": "/#_5",
            "text": "前端结合介绍了一个非常神奇的包，让 Django 应用也能获得非常接近单页应用的用户体验，来自 Rails 社区的  Turbolinks ，有人根据 Django 的 middleware 原理开发了适合 Django 的包，非常容易接入，就能让 Django 应用使用体验大变样。还介绍了一个 Django 结合 Webpack 的工具，Webpack 是现在前端最流行的打包工具，用来打包全部前端内容，CSS/JS/字体/图片，我也使用过 Django 的一些前端辅助工具，就是把全部 JS 和 CSS 拼接成一个文件然后 minifier，JS 还要在 uglify 混淆，其实都不太好用，还不如我自己写个 gulpfile。",
            "title": "前端结合"
        },
        {
            "location": "/#sentry",
            "text": "最后介绍了如何接入 Sentry，Python 这样的动态语言，没有类型，要在运行时才会报错，很难在最开始就把代码中的异常处理都考虑到，所以就需要 Sentry 这样的捕获工具。作为一个『全干』工程师，部署应用，服务器 trouble shotting 也是一项必须掌握的技能。其实 Django 非常容易部署，只要选对了发行版，我对比下来用 Ubuntu 是最方便的，环境问题最少，熟练的话从启动服务器到完成二十分钟就能搞定。",
            "title": "接入 Sentry 和部署问题"
        },
        {
            "location": "/structure/",
            "text": "项目结构\n¶\n\n\n├─ config.rb  #指定额外的compass插件\n├─ config.ru\n├─ Rakefile   #rake的配置文件,类似于makefile 添加Tag 功能后要自动在编辑每篇Blog 时自动在前面添加tags: 提示\n├─ Gemfile    #bundle要下载需要的gem依赖关系的指定文件\n├─ Gemfile.lock  #这些gem依赖的对应关系,比如A的x版本依赖于B的y版本\n├─ _config.yml   #站点的配置文件\n├─ public/    #在静态编译完成后的目录,网站只需要这个目录下的文件树\n├─ _deploy/   #deploy时候生成的缓存文件夹,和public目录一样\n├─ sass/      #css文件的源文件,过程中会compass成css\n├─ plugins/   #放置自带以及第三方插件的目录,ruby程序\n│   └── xxx.rb\n└─ source/    #站点的源文件目录,public目录就是根据这个目录下数据生成的\n   └─ _includes/\n      └─ custom/      #自定义的模板目录,被相应上级html include\n         └─ asides/   #边栏模板自定义模板目录\n      └─ asides/      #边栏模板目录\n      └─ post/        #文章页面相应模板目录\n   └─ _layouts/       #默认网站html相关文件,最底层\n   └─ _posts/         #新增以及从其它程序迁移过来的数据都存在这里\n   └─ images/         #图片目录 可手动添加，添加后Blog 应用图片可直接从这个文件中引用\n└─ README.markdown    #octopress 说明\n└─ CHANGELOG.markdown    # octopress 更新说明",
            "title": "Structure"
        },
        {
            "location": "/structure/#_1",
            "text": "├─ config.rb  #指定额外的compass插件\n├─ config.ru\n├─ Rakefile   #rake的配置文件,类似于makefile 添加Tag 功能后要自动在编辑每篇Blog 时自动在前面添加tags: 提示\n├─ Gemfile    #bundle要下载需要的gem依赖关系的指定文件\n├─ Gemfile.lock  #这些gem依赖的对应关系,比如A的x版本依赖于B的y版本\n├─ _config.yml   #站点的配置文件\n├─ public/    #在静态编译完成后的目录,网站只需要这个目录下的文件树\n├─ _deploy/   #deploy时候生成的缓存文件夹,和public目录一样\n├─ sass/      #css文件的源文件,过程中会compass成css\n├─ plugins/   #放置自带以及第三方插件的目录,ruby程序\n│   └── xxx.rb\n└─ source/    #站点的源文件目录,public目录就是根据这个目录下数据生成的\n   └─ _includes/\n      └─ custom/      #自定义的模板目录,被相应上级html include\n         └─ asides/   #边栏模板自定义模板目录\n      └─ asides/      #边栏模板目录\n      └─ post/        #文章页面相应模板目录\n   └─ _layouts/       #默认网站html相关文件,最底层\n   └─ _posts/         #新增以及从其它程序迁移过来的数据都存在这里\n   └─ images/         #图片目录 可手动添加，添加后Blog 应用图片可直接从这个文件中引用\n└─ README.markdown    #octopress 说明\n└─ CHANGELOG.markdown    # octopress 更新说明",
            "title": "项目结构"
        },
        {
            "location": "/up_and_running/",
            "text": "安装 requirements.txt 中的第三方库\n¶\n\n\n因为这个教程用到了挺多东西，但都非常容易在本地下载了跑起来，首先是数据库用的是 PostgreSQL，任务队列用到了 Redis，其他的话可能 requirements.txt 中的某些库在不同环境下可能会出现问题，在 macOS 上使用 Python3 都能安装成功，我就不在这里详细写了，全部安装完成后需要有两个 GUI 客户端方便看数据库，PostgreSQL 我用的是 \nPostico\n，Redis 用的是 \nMedis\n。\n\n\n# clone code and install pip packages\n\ngit clone https://github.com/lsdlab/advance_django_example\n\ncd\n advence_django_example\npip install -r requirements.txt\n\n\n\n\n\n启动本地开发服务\n¶\n\n\n项目在 conf 文件夹下将 prodution 和 development 环境的配置进行了区分，使用 python-dotenv 读取 .env 文件，获得项目的 secret_key、数据库用户名密码等等。\n\n\n启动了本地的 PostgreSQL 和 Redis 服务后，手动新建一个数据库，进入项目文件夹下，运行 \npython manage.py migrate --settings=conf.development.settings\n，进行数据库迁移，然后运行 \npython manage.py runserver 0.0.0.0:8000 --settings=conf.development.settings\n，浏览器打开 \nlocalhost:8000\n 就能看到首页了。",
            "title": "up & running"
        },
        {
            "location": "/up_and_running/#requirementstxt",
            "text": "因为这个教程用到了挺多东西，但都非常容易在本地下载了跑起来，首先是数据库用的是 PostgreSQL，任务队列用到了 Redis，其他的话可能 requirements.txt 中的某些库在不同环境下可能会出现问题，在 macOS 上使用 Python3 都能安装成功，我就不在这里详细写了，全部安装完成后需要有两个 GUI 客户端方便看数据库，PostgreSQL 我用的是  Postico ，Redis 用的是  Medis 。  # clone code and install pip packages \ngit clone https://github.com/lsdlab/advance_django_example cd  advence_django_example\npip install -r requirements.txt",
            "title": "安装 requirements.txt 中的第三方库"
        },
        {
            "location": "/up_and_running/#_1",
            "text": "项目在 conf 文件夹下将 prodution 和 development 环境的配置进行了区分，使用 python-dotenv 读取 .env 文件，获得项目的 secret_key、数据库用户名密码等等。  启动了本地的 PostgreSQL 和 Redis 服务后，手动新建一个数据库，进入项目文件夹下，运行  python manage.py migrate --settings=conf.development.settings ，进行数据库迁移，然后运行  python manage.py runserver 0.0.0.0:8000 --settings=conf.development.settings ，浏览器打开  localhost:8000  就能看到首页了。",
            "title": "启动本地开发服务"
        },
        {
            "location": "/chapter1/",
            "text": "任务队列 Celery\n¶\n\n\nCelery\n 是一个 Python 分布式任务队列",
            "title": "第一章 - 任务队列 Celery"
        },
        {
            "location": "/chapter1/#celery",
            "text": "Celery  是一个 Python 分布式任务队列",
            "title": "任务队列 Celery"
        },
        {
            "location": "/chapter2/",
            "text": "",
            "title": "第二章 - 另一个任务队列 django-rq"
        },
        {
            "location": "/chapter3/",
            "text": "",
            "title": "第三章 - 简单定时任务 django-crontab"
        },
        {
            "location": "/chapter4/",
            "text": "",
            "title": "第四章 - 复杂搜索 django-elasticsearch"
        },
        {
            "location": "/chapter5/",
            "text": "",
            "title": "第五章 - 用户模块 App 的视图实现及 RESTful API 实现"
        },
        {
            "location": "/chapter6/",
            "text": "",
            "title": "第六章 - 用户模块 App 的GraphQL 实现"
        },
        {
            "location": "/chapter7/",
            "text": "",
            "title": "第七章 - 打标签 django-taggit"
        },
        {
            "location": "/chapter8/",
            "text": "",
            "title": "第八章 - 信息流 django-activity-stream"
        },
        {
            "location": "/chapter9/",
            "text": "",
            "title": "第九章 - 验证码和图片处理 django-simple-captcha and django-imagekit"
        },
        {
            "location": "/chapter10/",
            "text": "",
            "title": "第十章 - 本地开发辅助 django-debug-toolbar 和 django-extensions"
        },
        {
            "location": "/chapter11/",
            "text": "",
            "title": "第十一章 - 前端结合 django-turbolinks 和 Webpack django-webpack-loader"
        },
        {
            "location": "/chapter12/",
            "text": "",
            "title": "第十二章 - 接入 Sentry"
        },
        {
            "location": "/chapter13/",
            "text": "",
            "title": "第十三章 - 部署及 API Benchmark"
        },
        {
            "location": "/draft/",
            "text": "进阶 Django 教程\n¶\n\n\n \n\n\nrequirement.txt\n¶\n\n\navatar-generator need some tweak\n¶\n\n\navatar-generator\n\n\npip version is broken, use git version.\n\n\npip install git+https://github.com/maethor/avatar-generator.git\n\n\n\n\n\nDjango 常用库\n¶\n\n\n\n\nCelery 任务队列 定时任务 远程执行。每天获取 Upslash 最新图片，定时获取服务器监控信息，商品信息爬虫\n\n\ndjango-rq 另一个任务队列\n\n\n简单定时任务 django-crontab\n\n\n商品属性搜索应用 django-elasticsearch\n\n\nRESTful API django-restframework + JWT API 限流 django-ratelimit\n\n\ndjango-simple-captcha and django-imagekit 验证码和图片处理\n\n\n用户模块 API 及页面功能\n\n\nHTTP2 nginx Benchmark and API Benchmark\n\n\n本地开发辅助 debug tools: django-debug-toolbar and django-extensions\n\n\ndjango-taggit 打标签\n\n\ndjango-activity-stream 信息流\n\n\n\n\n前端结合 webpack django-webpack-loader\n\n\n\n\n\n\nbuilt-in admin panel django-flat-responsive\n\n\n\n\n接入 sentry\n\n\n\n\ncelery result backend and custom scheduler\n¶\n\n\npython manage.py migrate django_celery_results\n\n# redis result backend\nCELERY_RESULT_BACKEND = 'redis://localhost:6379/0'\n# database result backend, use django-celery-results\n# CELERY_RESULT_BACKEND = 'django-db'\n\npython manage.py migrate django_celery_beat\n\n\n\n\n\ncelery worker and beat\n¶\n\n\nredisstart\ncelery -A advance_django_example  worker --loglevel=info\ncelery -A advance_django_example  beat --loglevel=info\n\n\n\n\n\nflower\n¶\n\n\nflower -A advance_django_example --basic_auth=lsdvincent:1234\n\n\n\n\n\ndjango-turbolinks\n¶\n\n\n\n\npip install django-turbolinks\n\n\nAdd \nturbolinks.middleware.TurbolinksMiddleware\n after\ndjango.contrib.sessions.middleware.SessionMiddleware\n to your \nMIDDLEWARE_CLASSES\n setting.\n\n\nAdd \nturbolinks\n to your \nINSTALLED_APPS\n setting.\n\n\nRun \n./manage.py collectstatic\n\n\nInclude \n/static/turbolinks/turbolinks.js\n script in your base template.",
            "title": "草稿"
        },
        {
            "location": "/draft/#django",
            "text": "",
            "title": "进阶 Django 教程"
        },
        {
            "location": "/draft/#requirementtxt",
            "text": "",
            "title": "requirement.txt"
        },
        {
            "location": "/draft/#avatar-generator-need-some-tweak",
            "text": "avatar-generator  pip version is broken, use git version.  pip install git+https://github.com/maethor/avatar-generator.git",
            "title": "avatar-generator need some tweak"
        },
        {
            "location": "/draft/#django_1",
            "text": "Celery 任务队列 定时任务 远程执行。每天获取 Upslash 最新图片，定时获取服务器监控信息，商品信息爬虫  django-rq 另一个任务队列  简单定时任务 django-crontab  商品属性搜索应用 django-elasticsearch  RESTful API django-restframework + JWT API 限流 django-ratelimit  django-simple-captcha and django-imagekit 验证码和图片处理  用户模块 API 及页面功能  HTTP2 nginx Benchmark and API Benchmark  本地开发辅助 debug tools: django-debug-toolbar and django-extensions  django-taggit 打标签  django-activity-stream 信息流   前端结合 webpack django-webpack-loader    built-in admin panel django-flat-responsive   接入 sentry",
            "title": "Django 常用库"
        },
        {
            "location": "/draft/#celery-result-backend-and-custom-scheduler",
            "text": "python manage.py migrate django_celery_results\n\n# redis result backend\nCELERY_RESULT_BACKEND = 'redis://localhost:6379/0'\n# database result backend, use django-celery-results\n# CELERY_RESULT_BACKEND = 'django-db'\n\npython manage.py migrate django_celery_beat",
            "title": "celery result backend and custom scheduler"
        },
        {
            "location": "/draft/#celery-worker-and-beat",
            "text": "redisstart\ncelery -A advance_django_example  worker --loglevel=info\ncelery -A advance_django_example  beat --loglevel=info",
            "title": "celery worker and beat"
        },
        {
            "location": "/draft/#flower",
            "text": "flower -A advance_django_example --basic_auth=lsdvincent:1234",
            "title": "flower"
        },
        {
            "location": "/draft/#django-turbolinks",
            "text": "pip install django-turbolinks  Add  turbolinks.middleware.TurbolinksMiddleware  after django.contrib.sessions.middleware.SessionMiddleware  to your  MIDDLEWARE_CLASSES  setting.  Add  turbolinks  to your  INSTALLED_APPS  setting.  Run  ./manage.py collectstatic  Include  /static/turbolinks/turbolinks.js  script in your base template.",
            "title": "django-turbolinks"
        }
    ]
}